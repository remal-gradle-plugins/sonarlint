import static java.nio.charset.StandardCharsets.UTF_8

import java.nio.file.Files
import java.util.jar.JarFile
import java.util.zip.ZipEntry
import java.util.zip.ZipInputStream
import java.util.zip.ZipOutputStream
import org.gradle.util.GradleVersion
import org.objectweb.asm.ClassReader
import org.objectweb.asm.ClassWriter
import org.objectweb.asm.tree.ClassNode

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

buildscript {
    String rootGroupId = project.ext.rootGroupId = "name.remal.gradle-plugins.${rootProject.name}"
    String rootArtifactId = project.ext.rootArtifactId = rootProject.name
    String rootSnapshotVersion = project.ext.rootSnapshotVersion = '7-SNAPSHOT'
    dependencies {
        //classpath("$rootGroupId:$rootArtifactId:$rootSnapshotVersion") { version { strictly(rootSnapshotVersion) } }
        classpath 'name.remal.gradle-plugins.toolkit:build-logic:0.74.0'
        classpath 'de.undercouch:gradle-download-task:5.6.0'
        classpath 'com.tisonkun.os:os-detector-core:0.6.0'
        classpath 'io.github.classgraph:classgraph:4.8.181'

        classpath platform("org.ow2.asm:asm-bom:9.8")
        classpath 'org.ow2.asm:asm-tree'
    }
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }

    project.ext.rootBuildscriptClasspathVersionOf = { String notation ->
        String version = project.buildscript.configurations.classpath
            .resolvedConfiguration
            .lenientConfiguration
            .allModuleDependencies
            .find { "${it.moduleGroup}:${it.moduleName}" == notation }
            ?.moduleVersion
        if (version == null) {
            throw new GradleException("Classpath dependency version can't be found for '${notation}'")
        }
        return version
    }.memoize()
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

allprojects {
    group = project.rootGroupId
    version = project.rootSnapshotVersion
}

apply plugin: 'name.remal.toolkit.build-logic'

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

apply plugin: 'java-gradle-plugin'
apply plugin: 'name.remal.classes-relocation'
apply plugin: 'name.remal.generate-sources'

SourceSet componentTestSourceSet = testSourceSets.create('componentTest')

dependencies {
    classesRelocation 'com.tisonkun.os:os-detector-core:0.6.0'

    componentTestImplementation 'org.junit.platform:junit-platform-launcher'
}

buildTimeConstants.properties([
    'gradle-api.min-version': provider { project.property('gradle-api.min-version')?.toString() ?: '' },
    'classesRelocation.basePackageForRelocatedClasses': provider { classesRelocation.basePackageForRelocatedClasses.get() },
])

gradlePlugin {
    plugins {
        'name.remal.sonarlint' {
            id = 'name.remal.sonarlint'
            implementationClass = 'name.remal.gradle_plugins.sonarlint.SonarLintPlugin'
            displayName = 'SonarLint'
            description = property('repository-description')
        }
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

apply plugin: 'java-test-fixtures'

configurations.testFixturesImplementation.extendsFrom(configurations.testConstraints)

configurations.testImplementation.dependencies.withType(ExternalModuleDependency).all {
    if (configurations.testFixturesImplementation.state != Configuration.State.UNRESOLVED) {
        return
    }

    configurations.testFixturesImplementation.dependencies.add(it)
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

generateSources.forMainSourceSet.java {
    Provider<MavenPublication> publication = provider { publishing.publications.withType(MavenPublication).pluginMaven }
    Provider<String> group = provider { publication.get().groupId }
    Provider<String> artifactId = provider { publication.get().artifactId }
    Provider<String> version = provider { publication.get().version }
    inputs.property('groupId', group)
    inputs.property('artifactId', artifactId)
    inputs.property('version', version)

    classFile(project.calculateBaseJavaPackage(), 'SonarLintPluginBuildInfo') {
        block("interface ${simpleName}") {
            line("String SONARLINT_PLUGIN_ID = \"${escapeString(gradlePlugin.plugins.names.first())}\";")
            line("String SONARLINT_PLUGIN_GROUP = \"${escapeString(group.get())}\";")
            line("String SONARLINT_PLUGIN_ARTIFACT_ID = \"${escapeString(artifactId.get())}\";")
            line("String SONARLINT_PLUGIN_VERSION = \"${escapeString(version.get())}\";")
        }
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

project.javaRuntimeMinVersion.majorVersion.toInteger().with { javaRuntimeMinVersion ->
    project.redefineDependencyTargetJvmVersion('org.springframework:spring-core', javaRuntimeMinVersion)
    project.redefineDependencyTargetJvmVersion('org.springframework:spring-context', javaRuntimeMinVersion)
    project.redefineDependencyTargetJvmVersion('org.springframework:spring-beans', javaRuntimeMinVersion)
    project.redefineDependencyTargetJvmVersion('org.springframework:spring-aop', javaRuntimeMinVersion)
    project.redefineDependencyTargetJvmVersion('org.springframework:spring-expression', javaRuntimeMinVersion)
    project.redefineDependencyTargetJvmVersion('org.springframework:spring-jcl', javaRuntimeMinVersion)
}

Configuration allSonarArtifactsConf = project.configurations.create('allSonarArtifacts')

Closure<Configuration> createSonarArtifactsConfiguration = { String name, boolean addToIndirectApi = true ->
    return project.configurations.create(name) { Configuration conf ->
        conf.transitive = false
        conf.extendsFrom = []
        conf.dependencies.all { Dependency dep ->
            allSonarArtifactsConf.dependencies.add(dep.copy())

            if (dep instanceof ModuleDependency) {
                dep.transitive = false
            }
            if (dep instanceof ExternalDependency) {
                dep.version { strictly(dep.version) }
            }
        }

        if (addToIndirectApi) {
            project.configurations.indirectApi.extendsFrom(conf)
        }
    }
}

Configuration sonarCoreArtifactsConf = createSonarArtifactsConfiguration('sonarCoreArtifacts')
Configuration sonarPluginArtifactsConf = createSonarArtifactsConfiguration('sonarPluginArtifacts')

dependencies {
    // Core:
    //sonarCoreArtifacts 'org.sonarsource.sonarlint.core:sonarlint-core:10.18.0.80725'
    sonarCoreArtifacts 'org.sonarsource.sonarlint.core:sonarlint-analysis-engine:10.32.0.82302'
    sonarCoreArtifacts 'org.sonarsource.sonarlint.core:sonarlint-rule-extractor:10.32.0.82302'


    // Plugins:
    // See full list of supported plugins here: https://github.com/SonarSource/sonarlint-intellij/blob/master/gradle/libs.versions.toml
    sonarPluginArtifacts 'org.sonarsource.java:sonar-java-plugin:8.18.0.40025'
    sonarPluginArtifacts 'org.sonarsource.java:sonar-java-symbolic-execution-plugin:8.18.1.347'
    sonarPluginArtifacts 'org.sonarsource.javascript:sonar-javascript-plugin:11.4.1.34873'
    //sonarPluginArtifacts 'org.sonarsource.php:sonar-php-plugin:3.39.0.12526' // PHP projects are unlikely built with Gradle
    //sonarPluginArtifacts 'org.sonarsource.python:sonar-python-plugin:4.23.0.17664' // Python projects are unlikely built with Gradle
    sonarPluginArtifacts 'org.sonarsource.kotlin:sonar-kotlin-plugin:3.3.0.7402'
    //sonarPluginArtifacts 'org.sonarsource.slang:sonar-ruby-plugin:1.17.1.134' // Ruby projects are unlikely built with Gradle
    sonarPluginArtifacts 'org.sonarsource.html:sonar-html-plugin:3.19.0.5695'
    sonarPluginArtifacts 'org.sonarsource.xml:sonar-xml-plugin:2.13.0.5938'
    //sonarPluginArtifacts 'org.sonarsource.sonarlint.omnisharp:sonarlint-omnisharp-plugin:1.25.0.100205' // OmniSharp projects are unlikely built with Gradle
    sonarPluginArtifacts 'org.sonarsource.text:sonar-text-plugin:2.29.0.8107'
    //sonarPluginArtifacts 'org.sonarsource.slang:sonar-go-plugin:1.17.1.145' // Go projects are unlikely built with Gradle
    sonarPluginArtifacts 'org.sonarsource.iac:sonar-iac-plugin:1.50.0.16452'
    //sonarPluginArtifacts 'com.sonarsource.cpp:sonar-cfamily-plugin:6.60.0.76379' // C++ projects are unlikely built with Gradle
    //sonarPluginArtifacts 'org.sonarsource.dotnet:sonar-csharp-plugin:10.2.0.103721' // C# projects are unlikely built with Gradle
    //sonarPluginArtifacts 'com.sonarsource.dotnet:sonar-csharp-enterprise-plugin:10.2.0.103721' // C# projects are unlikely built with Gradle
    sonarPluginArtifacts 'org.sonarsource.slang:sonar-scala-plugin:1.19.0.484'
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

List<Map<String, String>> sonarLintCoreLibrariesExclusions = [
    [group: 'org.apache.httpcomponents.client5'],
    [group: 'org.apache.httpcomponents.core5'],
    [group: 'org.sonarsource.sonarlint.core', module: 'sonarlint-server-connection'],
    [group: 'org.sonarsource.sonarlint.core', module: 'sonarlint-rpc-protocol'],
    [group: 'org.sonarsource.sonarlint.core', module: 'sonarlint-http'],

    [group: 'org.eclipse.jgit'],
    [group: 'org.sonarsource.git.blame'],
]

List<Map<String, String>> sonarLintCoreLoggingImplExclusions = [
    [group: 'org.slf4j', module: 'slf4j-simple'],
    [group: 'org.slf4j', module: 'slf4j-nop'],
    [group: 'ch.qos.logback'],
    [group: 'org.apache.logging.log4j', module: 'log4j-core'],
    [group: 'org.apache.logging.log4j', module: 'log4j-slf4j-impl'],
    [group: 'log4j'],
]

List<Map<String, String>> sonarLintCoreLoggingAllExclusions = sonarLintCoreLoggingImplExclusions + [
    [group: 'org.slf4j'],
    [group: 'org.apache.logging.log4j'],
    [group: 'org.springframework', module: 'spring-jcl'],
]

List<Map<String, String>> allSonarLintCoreExclusions = sonarLintCoreLibrariesExclusions + sonarLintCoreLoggingAllExclusions

; [
    sonarLintCoreLibrariesExclusions,
    sonarLintCoreLoggingImplExclusions,
    sonarLintCoreLoggingAllExclusions,
    allSonarLintCoreExclusions,
].forEach { List<Map<String, String>> exclusions ->
    Set<Map<String, String>> seen = new LinkedHashSet<>()
    exclusions.removeIf { !seen.add(it) }

    exclusions.collect().forEach { exclusion ->
        if ((exclusion.module ?: '').isEmpty()) {
            exclusions.removeIf { it.group == exclusion.group && !(it.module ?: '').isEmpty() }
        }
    }

    Collections.sort(exclusions, Comparator.comparing { "${it.group ?: ''}:${it.module ?: ''}" })
}


allSonarArtifactsConf.dependencies.withType(ModuleDependency).all { ModuleDependency dep ->
    allSonarLintCoreExclusions.forEach { dep.exclude(it) }
}

sonarCoreArtifactsConf.dependencies.withType(ModuleDependency).all { ModuleDependency dep ->
    allSonarLintCoreExclusions.forEach { dep.exclude it }

    configurations.optional.dependencies.add(project.dependencies.create("${dep.group}:${dep.name}:${dep.version}") { ModuleDependency innerDep ->
        allSonarLintCoreExclusions.forEach { innerDep.exclude it }
    })
}

sonarPluginArtifactsConf.dependencies.withType(ModuleDependency).all { ModuleDependency dep ->
    allSonarLintCoreExclusions.forEach { dep.exclude it }

    configurations.compileOnly.dependencies.add(project.dependencies.create("${dep.group}:${dep.name}:${dep.version}") { ModuleDependency innerDep ->
        transitive = false
        allSonarLintCoreExclusions.forEach { innerDep.exclude it }
    })
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

Map<String, String> sonarDependencyVersionsToFix = [
    'org.eclipse.platform:org.eclipse.core.contenttype:3.8.200': '3.8.100',
    'org.eclipse.platform:org.eclipse.equinox.preferences:3.10.100': '3.10.200',
]
Map<String, String> fixedSonarDependencyVersions = new TreeMap<>().asSynchronized()
Map<String, String> nonReproducibleSonarDependencyVersions = new TreeMap<>().asSynchronized()
; [allSonarArtifactsConf, sonarCoreArtifactsConf, sonarPluginArtifactsConf].forEach { conf ->
    conf.resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        ModuleVersionSelector target = details.target
        String id = "${target.group}:${target.name}:${target.version}".toString()
        String fixedVersion = sonarDependencyVersionsToFix[id]
        if (fixedVersion != null) {
            fixedSonarDependencyVersions[id] = fixedVersion
            details.useVersion(fixedVersion)
        }
    }

    conf.resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        ModuleVersionSelector target = details.target

        String version = target.version
        if (version == null) {
            return
        }
        boolean isNotReproducible = version.endsWith('-SNAPSHOT') || ['(', '[', ']', ')'].any { version.contains(it) }
        if (!isNotReproducible) {
            return
        }

        String id = "${target.group}:${target.name}".toString()
        nonReproducibleSonarDependencyVersions.put(id, version)
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

TaskProvider verifySonarPlugins = tasks.register('verifySonarPlugins') {
    ConfigurableFileCollection pluginJars = objects.fileCollection().from(configurations.sonarPluginArtifacts)

    inputs.files(pluginJars).withPropertyName('pluginJars').optional().withNormalizer(ClasspathNormalizer)
    outputs.file(file("build/${name}.out")).optional()

    group = 'verification'

    doLast {
        pluginJars.files.forEach { File file ->
            new JarFile(file).withCloseable { jarFile ->
                boolean supported = Boolean.parseBoolean(jarFile.manifest.mainAttributes.getValue('SonarLint-Supported'))
                if (!supported) {
                    throw new VerificationException("${file}: ${JarFile.MANIFEST_NAME} doesn't contain `SonarLint-Supported` equal to `true`")
                }
            }
        }
    }
}

tasks.named('check') { dependsOn(verifySonarPlugins) }

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

project.ext.DownloadTask = Class.forName('de.undercouch.gradle.tasks.download.Download')
apply from: 'build-nodejs.gradle'
apply from: 'build-languages.gradle'

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

Configuration sonarCoreTransitiveWithoutExclusionsConf = configurations.create('sonarCoreTransitiveWithoutExclusions') { Configuration conf ->
    sonarCoreArtifactsConf.dependencies.withType(ModuleDependency).all { ModuleDependency dep ->
        conf.dependencies.add(project.dependencies.create("${dep.group}:${dep.name}:${dep.version}"))
    }
}

Property<String> sonarCoreSlf4jVersion = objects.property(String).value(provider {
    return sonarCoreTransitiveWithoutExclusionsConf
        .resolvedConfiguration
        .lenientConfiguration
        .allModuleDependencies
        .find { "${it.moduleGroup}:${it.moduleName}" == 'org.slf4j:slf4j-api' }
        ?.moduleVersion
}).with { it.finalizeValueOnRead(); it }

; [
    'org.slf4j:slf4j-simple',
    'org.slf4j:jul-to-slf4j',
].forEach { notation ->
    configurations.compileOnly.dependencies.addLater(provider { dependencies.create("$notation:${sonarCoreSlf4jVersion.get()}") })
}

generateSources.forMainSourceSet.java { Task task ->
    inputs.files(allSonarArtifactsConf).withPropertyName(allSonarArtifactsConf.name).optional(false)
    inputs.files(sonarCoreArtifactsConf).withPropertyName(sonarCoreArtifactsConf.name).optional(false)
    inputs.files(sonarPluginArtifactsConf).withPropertyName(sonarPluginArtifactsConf.name).optional(true)
    inputs.property('sonarCoreSlf4jVersion', sonarCoreSlf4jVersion).optional(false)
    inputs.property('sonarLintCoreLibrariesExclusions', sonarLintCoreLibrariesExclusions).optional(true)
    inputs.property('sonarLintCoreLoggingImplExclusions', sonarLintCoreLoggingImplExclusions).optional(true)
    inputs.property('sonarLintCoreLoggingAllExclusions', sonarLintCoreLoggingAllExclusions).optional(true)

    classFile(project.calculateBaseJavaPackage(), 'SonarDependencies') {
        addImport("com.google.common.collect.ImmutableMap")
        addImport("java.util.List")
        addImport("java.util.Map")
        addImport("org.jetbrains.annotations.Unmodifiable")

        block("interface ${simpleName}") {
            line()
            line("@Unmodifiable")
            line("List<SonarDependency> SONARLINT_CORE_DEPENDENCIES = List.of(")
            indent {
                List<Dependency> coreDependencies = sonarCoreArtifactsConf.dependencies.collect()
                coreDependencies.eachWithIndex { dep, index ->
                    line("SonarDependency.builder()")
                    line("    .group(\"${escapeString(dep.group)}\")")
                    line("    .name(\"${escapeString(dep.name)}\")")
                    line("    .version(\"${escapeString(dep.version)}\")")
                    line("    .build()${index < coreDependencies.size() - 1 ? ',' : ''}")
                }
            }
            line(");")

            line()
            line("@Unmodifiable")
            line("List<SonarDependency> SONARLINT_PLUGIN_DEPENDENCIES = List.of(")
            indent {
                List<Dependency> coreDependencies = sonarPluginArtifactsConf.dependencies.collect()
                coreDependencies.eachWithIndex { dep, index ->
                    line("SonarDependency.builder()")
                    line("    .group(\"${escapeString(dep.group)}\")")
                    line("    .name(\"${escapeString(dep.name)}\")")
                    line("    .version(\"${escapeString(dep.version)}\")")
                    line("    .build()${index < coreDependencies.size() - 1 ? ',' : ''}")
                }
            }
            line(");")

            line()
            line("String SONARLINT_CORE_SLF4J_VERSION = \"${escapeString(sonarCoreSlf4jVersion.get())}\";")

            [
                'SONARLINT_CORE_LIBRARIES_EXCLUSIONS': sonarLintCoreLibrariesExclusions,
                'SONARLINT_CORE_LOGGING_IMPL_EXCLUSIONS': sonarLintCoreLoggingImplExclusions,
                'SONARLINT_CORE_LOGGING_ALL_EXCLUSIONS': sonarLintCoreLoggingAllExclusions,
            ].forEach { field, exclusions ->
                line()
                line("@Unmodifiable")
                line("List<@Unmodifiable Map<String, String>> $field = List.of(")
                indent {
                    exclusions.eachWithIndex { exclusion, exclusionIndex ->
                        StringBuilder string = new StringBuilder()
                        string.append('ImmutableMap.of(')
                        exclusion.entrySet().eachWithIndex { entry, entryIndex ->
                            if (entryIndex > 0) {
                                string.append(', ')
                            }

                            string.append("\"${escapeString(entry.key.toString())}\", \"${escapeString(entry.value.toString())}\"")
                        }
                        string.append(')')

                        if (exclusionIndex < exclusions.size() - 1) {
                            string.append(',')
                        }
                        line(string)
                    }
                }
                line(");")
            }
        }
    }

    classFile(project.calculateBaseJavaPackage(), 'DependencyWithBrokenVersion') {
        addStaticImport("lombok.AccessLevel", "PRIVATE")

        addImport("com.google.common.collect.ImmutableMap")
        addImport("java.util.Map")
        addImport("lombok.NoArgsConstructor")
        addImport("org.jspecify.annotations.Nullable")

        line("@NoArgsConstructor(access = PRIVATE)")
        block("abstract class ${simpleName}") {
            line()
            line("private static final Map<String, String> MAPPING = ImmutableMap.<String, String>builder()")
            indent {
                sonarCoreArtifactsConf.resolvedConfiguration.lenientConfiguration.allModuleDependencies.forEach { ResolvedDependency dep ->
                    String depId = "${dep.moduleGroup}:${dep.moduleName}".toString()
                    Map.Entry<String, String> fixedSonarDependencyVersionEntry = fixedSonarDependencyVersions.entrySet().find { it.key.startsWith("$depId:") }
                    if (fixedSonarDependencyVersionEntry != null) {
                        String notationToFix = fixedSonarDependencyVersionEntry.key
                        String version = fixedSonarDependencyVersionEntry.value
                        line(".put(\"${escapeString(notationToFix)}\", \"${escapeString(version)}\")")
                    }
                }
                line(".build();")
            }

            line()
            line("@Nullable")
            block("public static String getFixedVersionForBrokenDependency(String notation)") {
                line("return MAPPING.get(notation);")
            }

            line()
            block("public static boolean areFixedVersionForBrokenDependenciesRegistered()") {
                line("return !MAPPING.isEmpty();")
            }
        }
    }

    classFile(project.calculateBaseJavaPackage(), 'ResolvedNonReproducibleSonarDependencies') {
        addStaticImport("lombok.AccessLevel", "PRIVATE")

        addImport("com.google.common.collect.ImmutableMap")
        addImport("java.util.Map")
        addImport("lombok.NoArgsConstructor")
        addImport("org.jspecify.annotations.Nullable")

        line("@NoArgsConstructor(access = PRIVATE)")
        block("abstract class ${simpleName}") {
            line()
            line("private static final Map<String, SonarDependency> MAPPING = ImmutableMap.<String, SonarDependency>builder()")
            indent {
                sonarCoreArtifactsConf.resolvedConfiguration.lenientConfiguration.allModuleDependencies.forEach { ResolvedDependency dep ->
                    String depId = "${dep.moduleGroup}:${dep.moduleName}".toString()
                    String nonReproducibleVersion = nonReproducibleSonarDependencyVersions[depId]
                    if (nonReproducibleVersion != null) {
                        line(".put(\"${escapeString("${depId}:${nonReproducibleVersion}")}\", SonarDependency.builder()")
                        line("    .group(\"${escapeString(dep.moduleGroup)}\")")
                        line("    .name(\"${escapeString(dep.moduleName)}\")")
                        line("    .version(\"${escapeString(dep.moduleVersion)}\")")
                        line("    .build()")
                        line(")")
                    }
                }
                line(".build();")
            }

            line()
            line("@Nullable")
            block("public static SonarDependency getResolvedNonReproducibleSonarDependency(String notation)") {
                line("return MAPPING.get(notation);")
            }

            line()
            block("public static boolean areResolvedNonReproducibleSonarDependenciesRegistered()") {
                line("return !MAPPING.isEmpty();")
            }
        }
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

Configuration sonarCoreTransitiveConf = configurations.create('sonarCoreTransitive') { Configuration conf ->
    sonarCoreArtifactsConf.dependencies.all { Dependency dep ->
        dep = dep.copy()
        if (dep instanceof ModuleDependency) {
            dep.transitive = true
        }

        conf.dependencies.add(dep)
    }
}

configurations[componentTestSourceSet.runtimeOnlyConfigurationName].extendsFrom(sonarCoreTransitiveConf)

tasks.withType(Test).configureEach { Test task ->
    task.testClasspathScopeConfigurations.create('sonar-plugins').add(sonarPluginArtifactsConf)
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

Property<String> currentMinorGradleVersion = objects.property(String).value(provider {
    return GradleVersion.current().baseVersion.version
        .replaceFirst(/^(\d+\.\d+).*$/, '$1')
}).with { it.finalizeValueOnRead(); it }

generateSources.forSourceSet(sourceSets.testFixtures).java {
    inputs.property('currentMinorGradleVersion', currentMinorGradleVersion)

    classFile(project.calculateBaseJavaPackage(), "TestConstants") {
        block("public interface ${simpleName}") {
            line("String CURRENT_MINOR_GRADLE_VERSION = \"${escapeString(currentMinorGradleVersion.get())}\";")
        }
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

tasks.named('processReadme') {
    ListProperty pluginLanguageInfos = rootProject.pluginLanguageInfos
    readmeFileProcessors.add({ File readmeFile ->
        String content = readmeFile.getText('UTF-8')

        content = content.replaceAll(
            /<!--\s*(sonar-plugins-list)\s*-->[\s\S]*?<!--\s*\/\s*\1\s*-->/
        ) {
            String tag = it[1]
            logger.lifecycle('  Handling {}', tag)
            StringBuilder listContent = new StringBuilder()

            Map<String, String> languageDocPaths = [
                'js': 'javascript',
                'ts': 'typescript',
            ]

            pluginLanguageInfos.get()
                .toSorted { it.key }
                .forEach { info ->
                    String languageDocPath = languageDocPaths[info.key] ?: info.key
                    URL url = new URL("https://rules.sonarsource.com/${languageDocPath}/")
                    HttpURLConnection connection = url.openConnection()
                    connection.useCaches = false
                    connection.connectTimeout = 5_000
                    connection.readTimeout = 60_000
                    connection.connect()
                    try {
                        int responseCode = connection.responseCode
                        if (responseCode == 200) {
                            listContent.append("\n* [${info.name}]($url)")
                        } else if (responseCode == 404) {
                            listContent.append("\n* ${info.name}")
                        } else {
                            throw new GradleException("$url returned unexpected status: $responseCode")
                        }

                    } finally {
                        connection.disconnect()
                    }
                }

            return "<!--$tag-->\n$listContent\n\n<!--/$tag-->"
        }

        readmeFile.setText(content, 'UTF-8')
    })
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

allprojects {
    /*
    if (gradle.startParameter.taskNames.isEmpty()
        || gradle.startParameter.taskNames == ['processIdeaSettings']
        || gradle.startParameter.taskNames == ['dependencies']
        || gradle.startParameter.taskNames == ['help']
    ) {
        return
    }
    */

    pluginManager.withPlugin('java') {
        Attribute<Boolean> unprocessedSonar = Attribute.of('unprocessedSonar', Boolean)
        dependencies {
            attributesSchema {
                attribute(unprocessedSonar)
            }
            artifactTypes.getByName('jar') {
                attributes.attribute(unprocessedSonar, false)
            }
        }

        configurations
            .matching { !it.name.startsWith('sonar') }
            .matching { !it.name.startsWith('allSonar') }
            .all { Configuration conf ->
                if (conf.state != Configuration.State.UNRESOLVED
                    || !conf.canBeResolved
                ) {
                    return
                }

                Closure<Boolean> isSonarGroup = { String group ->
                    return group == 'org.sonarsource'
                        || group.startsWith('org.sonarsource.')
                }

                conf.dependencies.withType(ExternalModuleDependency).configureEach { ExternalModuleDependency dep ->
                    if (isSonarGroup(dep.group)) {
                        dep.exclude(group: 'com.google.guava')
                    }
                }

                conf.resolutionStrategy.dependencySubstitution { DependencySubstitutions substitutions ->
                    substitutions.all { DependencySubstitution substitution ->
                        if (!(substitution.requested instanceof ModuleComponentSelector)) {
                            return
                        }

                        ModuleComponentSelector requested = (ModuleComponentSelector) substitution.requested
                        if (isSonarGroup(requested.group)) {
                            ComponentSelector target = substitutions.variant(requested) { VariantSelectionDetails details ->
                                details.attributes {
                                    attribute(unprocessedSonar, true)
                                }
                            }
                            substitution.useTarget(target)
                        }
                    }
                }
            }

        dependencies {
            registerTransform(ProcessSonar) {
                from.attribute(unprocessedSonar, false)
                to.attribute(unprocessedSonar, true)
            }
        }
    }
}

abstract class ProcessSonar implements TransformAction<ProcessSonarParameters> {

    interface ProcessSonarParameters extends TransformParameters {}

    @InputArtifact
    abstract Provider<FileSystemLocation> getInputArtifact()

    @Override
    void transform(TransformOutputs outputs) {
        File file = inputArtifact.get().asFile
        //println file

        File outputFile = outputs.file(file.name)
        if (outputFile.exists() && outputFile.lastModified() >= rootProject.buildFile.lastModified()) {
            return
        }

        Files.createDirectories(outputFile.parentFile.toPath())
        new ZipInputStream(new FileInputStream(file), UTF_8).withCloseable { ZipInputStream inputStream ->
            new ZipOutputStream(new FileOutputStream(outputFile), UTF_8).withCloseable { ZipOutputStream outputStream ->
                while (true) {
                    ZipEntry zipEntry = inputStream.nextEntry
                    if (zipEntry == null) {
                        break
                    }

                    if (zipEntry.directory) {
                        continue
                    }

                    if (zipEntry.name.contains('/shaded/')) {
                        continue
                    }

                    if (!zipEntry.name.contains('sonar')
                        && !zipEntry.name.startsWith('META-INF/')
                        && zipEntry.name.contains('/')
                    ) {
                        continue
                    }

                    outputStream.putNextEntry(zipEntry)

                    if (!zipEntry.name.endsWith('.class')) {
                        outputStream << inputStream
                        continue
                    }

                    if (!zipEntry.name.startsWith('org/sonarsource/')
                        && !zipEntry.name.startsWith('org/sonar/')
                    ) {
                        outputStream << inputStream
                        continue
                    }


                    ClassNode classNode = new ClassNode()
                    new ClassReader(inputStream).accept(classNode, 0)

                    Closure processDeprecatedAnnotations = { node ->
                        // remove parameters of @Deprecated
                        node.visibleAnnotations
                            ?.findAll { it.desc == 'Ljava/lang/Deprecated;' && it.values?.size() }
                            ?.forEach {
                                it.values = []
                                //println classNode.name
                            }
                    }
                    processDeprecatedAnnotations(classNode)
                    classNode.fields?.forEach { processDeprecatedAnnotations(it) }
                    classNode.methods?.forEach { processDeprecatedAnnotations(it) }

                    ClassWriter classWriter = new ClassWriter(0)
                    classNode.accept(classWriter)

                    outputStream << classWriter.toByteArray()
                }
            }
        }
    }

}
