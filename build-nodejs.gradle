import java.net.http.HttpClient
import java.net.http.HttpRequest
import java.net.http.HttpResponse

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

MapProperty<String, String> javascriptPluginDependencyInfo = project.ext.javascriptPluginDependencyInfo = project.objects.mapProperty(String, String).value(provider {
    Dependency javascriptPluginArtifactDependency = project.configurations.sonarPluginArtifacts.dependencies
        .find { "${it.group}:${it.name}" == 'org.sonarsource.javascript:sonar-javascript-plugin' }
    if (javascriptPluginArtifactDependency == null) {
        throw new GradleException("Sonar JavaScript plugin dependency can't be found")
    }

    return [
        group: javascriptPluginArtifactDependency.group,
        name: javascriptPluginArtifactDependency.name,
        version: javascriptPluginArtifactDependency.version,
    ]
}).with { it.finalizeValueOnRead(); it }

MapProperty<String, String> embeddedNodeJsPlatforms = rootProject.ext.embeddedNodeJsPlatforms = project.objects.mapProperty(String, String).value(provider {
    Configuration classpathConfiguration = project.configurations.detachedConfiguration()
    classpathConfiguration.dependencies.withType(ModuleDependency).configureEach { dep ->
        dep.attributes {
            it.attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage.class, Usage.JAVA_RUNTIME))
            it.attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category.class, Category.LIBRARY))
        }
    }

    classpathConfiguration.dependencies.addAll(
        project.configurations.sonarCoreArtifacts.dependencies.collect { Dependency coreDependency ->
            project.dependencies.create([
                coreDependency.group,
                coreDependency.name,
                coreDependency.version,
            ].join(':'))
        }
    )

    classpathConfiguration.dependencies.add(
        project.dependencies.create(
            [
                javascriptPluginDependencyInfo.get().group,
                javascriptPluginDependencyInfo.get().name,
                javascriptPluginDependencyInfo.get().version,
                //'sonar-plugin',
            ].join(':')
        )
    )

    Collection<File> classpathFiles = classpathConfiguration.files
    Collection<URL> classpathUrls = classpathFiles.collect { it.toURI().toURL() }
    new URLClassLoader(classpathUrls.toArray(new URL[0]), Logger.classLoader).withCloseable { classLoader ->
        Class<?> platformClass = Class.forName('org.sonar.plugins.javascript.bridge.EmbeddedNode$Platform', true, classLoader)
        Enum[] platforms = platformClass.values()
        List<String> platformNames = platforms.collect { it.name() }
        platformNames.removeIf { it.equalsIgnoreCase('UNSUPPORTED') }

        List<String> unexpectedPlatformNames = platformNames.collect()
        ; [
            'WIN_X64',
            'LINUX_ARM64',
            'LINUX_X64',
            'LINUX_X64_MUSL',
            'DARWIN_ARM64',
            'DARWIN_X64',
        ].forEach { unexpectedPlatformNames.remove(it.toString()) }
        if (!unexpectedPlatformNames.isEmpty()) {
            throw new GradleException("Unexpected platform names detected: $unexpectedPlatformNames")
        }

        Map<String, String> platformNamesToClassifier = platformNames.collectEntries { [it, it.toLowerCase().replace('_', '-')] }

        platformNamesToClassifier.forEach { platformName, classifier ->
            File cacheFile = project.layout.buildDirectory.file("checked-embedded-nodejs-platforms/${javascriptPluginDependencyInfo.get().version}/$classifier").get().asFile
            if (cacheFile.exists()) {
                return
            }

            String urlToTest = String.format(
                'https://repo1.maven.org/maven2/%1$s/%2$s/%3$s/%2$s-%3$s-%4$s.jar',
                javascriptPluginDependencyInfo.get().group.replace('.', '/'),
                javascriptPluginDependencyInfo.get().name,
                javascriptPluginDependencyInfo.get().version,
                classifier
            )
            HttpClient client = HttpClient.newHttpClient()
            HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(urlToTest))
                .method("HEAD", HttpRequest.BodyPublishers.noBody())
                .build()
            HttpResponse<Void> response = client.send(request, HttpResponse.BodyHandlers.discarding());
            int statusCode = response.statusCode()
            if (statusCode != 200) {
                throw new GradleException("Can't find $platformName JAR file on MavenCentral: HEAD $urlToTest returned $statusCode status code")
            }

            cacheFile.parentFile.mkdirs()
            cacheFile.setText("$statusCode", 'UTF-8')
        }

        return platformNamesToClassifier
    }
}).with { it.finalizeValueOnRead(); it }

generateSources.forMainSourceSet.java {
    inputs.property('embeddedNodeJsPlatforms', embeddedNodeJsPlatforms)

    classFile(project.calculateBaseJavaPackage(), 'SonarJavascriptPluginInfo') {
        addStaticImport("lombok.AccessLevel", "PRIVATE")

        addImport("lombok.Getter")
        addImport("lombok.RequiredArgsConstructor")

        block("interface ${simpleName}") {
            line("SonarDependency SONAR_JAVASCRIPT_PLUGIN_DEPENDENCY = SonarDependency.builder()")
            indent {
                line(".group(\"${escapeString(javascriptPluginDependencyInfo.get().group)}\")")
                line(".name(\"${escapeString(javascriptPluginDependencyInfo.get().name)}\")")
                line(".version(\"${escapeString(javascriptPluginDependencyInfo.get().version)}\")")
                line(".build();")
            }

            line()

            line("@Getter")
            line("@RequiredArgsConstructor(access = PRIVATE)")
            block("enum EmbeddedNodeJsPlatform") {
                embeddedNodeJsPlatforms.get().forEach { platformName, classifier ->
                    line('%s("%s"),', platformName, escapeString(classifier))
                }
                line(";")

                line()
                line("private final String javascriptPluginClassifier;")
            }
        }
    }
}
